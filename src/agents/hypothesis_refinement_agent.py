"""
Agent: Hypothesis Refinement
Description: Updates the differential diagnosis based on the user's answers to 
             the clarifying questions.
"""
from langchain_core.prompts import ChatPromptTemplate
from pydantic import BaseModel, Field

from llm.llm_config import get_llm
from agents.hypothesis_generation_agent import DifferentialDiagnosis

# --- Pydantic Models ---

class RefinedDifferentialDiagnosis(DifferentialDiagnosis):
    """
    An updated version of the differential diagnosis.
    The probabilities of the hypotheses are adjusted based on new information from the user.
    """
    refinement_summary: str = Field(description="A brief summary explaining how the user's answers changed the likelihood of the diagnoses.")

# --- Prompt Template ---

REFINEMENT_PROMPT = ChatPromptTemplate.from_messages(
    [
        (
            "system",
            """You are an expert diagnostician AI. Your task is to refine a differential diagnosis based on new information provided by the patient.
            
            You will be given the previous list of hypotheses and the patient's answers to specific clarifying questions.
            
            Instructions:
            1.  Analyze the patient's answers.
            2.  Re-evaluate the probability of each hypothesis in the differential diagnosis based on this new information. Increase the probability for conditions that match the new answers and decrease it for those that do not.
            3.  Keep the reasoning for each hypothesis, but you can subtly update it if the new information is highly relevant.
            4.  The new probabilities should still be from 0.0 to 1.0 and should ideally sum to a value close to 1.0.
            5.  Provide a concise summary explaining *why* the probabilities have changed. For example, "The patient's report of sensitivity to light significantly increases the likelihood of a migraine."
            
            Present the most likely condition first in the updated list.""",
        ),
        (
            "human",
            "Here is the information for refinement:\n\n"
            "--- Previous Differential Diagnosis ---\n"
            "{differential_diagnosis}\n\n"
            "--- Patient's Answers to Clarifying Questions ---\n"
            "{user_answers}\n"
            "---",
        ),
    ]
)

# --- Agent Definition ---

def get_hypothesis_refinement_agent():
    """
    Creates and returns the hypothesis refinement agent.
    
    This agent takes the current diagnosis and the user's answers and
    returns an updated, more accurate differential diagnosis.
    """
    llm = get_llm()
    structured_llm = llm.with_structured_output(RefinedDifferentialDiagnosis)
    agent = REFINEMENT_PROMPT | structured_llm
    return agent

# --- Example Usage (for testing) ---

if __name__ == '__main__':
    from medical_diagnosis_ai.src.agents.hypothesis_generation_agent import DiagnosisHypothesis

    refinement_agent = get_hypothesis_refinement_agent()
    
    # This is the diagnosis from the previous agent's example
    previous_diagnosis = DifferentialDiagnosis(
        hypotheses=[
            DiagnosisHypothesis(condition="Migraine", probability=0.7, reasoning="Headache with nausea fits the pattern of a migraine."),
            DiagnosisHypothesis(condition="Postural Orthostatic Tachycardia Syndrome (POTS)", probability=0.2, reasoning="Dizziness upon standing is a key indicator of POTS."),
            DiagnosisHypothesis(condition="Tension Headache", probability=0.1, reasoning="Headache is the primary symptom, but nausea is less common.")
        ]
    )
    
    # These are the user's answers to the questions generated by the clarifying_question_agent
    user_answers = {
        "Are you experiencing any sensitivity to light or sound?": "Yes, bright lights make the headache much worse.",
        "Does the dizziness only happen when you stand up, or at other times as well?": "It's almost exclusively when I stand up."
    }
    
    response = refinement_agent.invoke({
        "differential_diagnosis": previous_diagnosis.dict(),
        "user_answers": user_answers
    })
    
    print("--- Refined Differential Diagnosis ---")
    print(f"Refinement Summary: {response.refinement_summary}\n")
    for h in response.hypotheses:
        print(f"- Condition: {h.condition} (Probability: {h.probability:.2f})")
        print(f"  Reasoning: {h.reasoning}")
